#!/usr/bin/env python
# -*- coding: utf-8 -*-

' an code scan module '

__author__ = 'kaixi fan'

import os
import sys
import time
import serial
import string
import matrix_logger as mlog


class Codescan(object):
	# 数据结构，存储：命令，参数，命令字节
	__funtionParameterCommandBytesDict = {
		# 恢复出厂设置
		'setRestoreFactory': {
			'restore': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0xFF, 0x02, 0xFD, 0x33],
		}, 

		# 设置接口方式
		# 	串口，USB HID，USB 虚拟串口
		'setCommunicateInterface': {
			'com': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x01, 0x00, 0xFE, 0x33],
			'usb': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x01, 0x01, 0xFE, 0x32],
			'usbcom': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x01, 0x02, 0xFE, 0x31],
		}, 

		# 设置扫描持续时间
		'setScanDuration': {
			'4s': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x88, 0x28, 0xFE, 0x77],
			'10s': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x88, 0x64, 0xFE, 0x3B],
			'1s': [ 0x07, 0xC6, 0x04, 0x00, 0xFF, 0x88, 0x0A, 0xFD, 0x9E],
		}, 

		# 设置触发模式
		'setTriggerMode': {
			'blink': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x8A, 0x07, 0xFE, 0x96],
			'autoSense': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x8A, 0x09, 0xFE, 0x94],
			'level': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x8A, 0x00, 0xFE, 0x9D],
			'pulse': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x8A, 0x02, 0xFE, 0x9B],
			'continuousScan': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x8A, 0x04, 0xFE, 0x99],
		}, 

		# 设置重码延时
		'setRepeatCodeDelay': {
			'0s': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x89, 0x00, 0xFE, 0x9E],
			'0.5s': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x89, 0x05, 0xFE, 0x99],
			'3s': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x89, 0x1E, 0xFE, 0x80],
		}, 

		# 设置结束符设置
		'setEndCharacter': {
			'none': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x05, 0x00, 0xFE, 0x2F],
			'crln': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x05, 0x01, 0xFE, 0x2E],
			'cr': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x05, 0x02, 0xFE, 0x2D],
			'tab': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x05, 0x03, 0xFE, 0x2C],
		}, 

		# 设置允许扫描配置条码
		'setEnableConfigCodeScanning': {
			'enable': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0xEC, 0x01, 0xFE, 0x3A],
			'disable': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0xEC, 0x00, 0xFE, 0x3B],
		}, 

		# 设置允许发送设置码
		'setEnableConfigCodeSending': {
			'enable': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF1, 0x71, 0x01, 0xFD, 0xC3],
			'disable': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF1, 0x71, 0x00, 0xFD, 0xC4],
		}, 

		# 设置电源模式
		'setPowerMode': {
			'normal': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x80, 0x00, 0xFE, 0xA7],
			'low': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x80, 0x01, 0xFE, 0xA6],
		}, 

		# 设置相同码输出间隔
		'setSameCodeSendingOutDuration': {
			'1500ms': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF3, 0x03, 0x0F, 0xFE, 0x21],
			'500ms': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF3, 0x03, 0x05, 0xFE, 0x2B],
			'300ms': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF3, 0x03, 0x03, 0xFE, 0x2D],
		}, 

		# 设置自感应灵敏度等级
		'setAutoSensitivity': {
			'super': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x04, 0x00, 0xFE, 0x30],
			'high': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x04, 0x01, 0xFE, 0x2F],
			'middle': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x04, 0x02, 0xFE, 0x2E],
			'low': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x04, 0x03, 0xFE, 0x2D],
		}, 

		# 设置电源指示灯
		'setPowerLedMode': {
			'onWhenScanningCode': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x0A, 0x00, 0xFE, 0x2A],
			'onAlways': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x0A, 0x01, 0xFE, 0x29],
		}, 

		# 设置解码成功提示灯
		'setEnableScanningSuccessFulLed': {
			'enable': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x0B, 0x01, 0xFE, 0x28],
			'disable': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x0B, 0x00, 0xFE, 0x29],
		}, 

		# 蜂鸣器音量
		'setBuzzerVollume': {
			'low': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x8C, 0x02, 0xFE, 0x99],
			'middle': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x8C, 0x01, 0xFE, 0x9A],
			'high': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x8C, 0x00, 0xFE, 0x9B],
		}, 

		# 静音
		'setEnableMute': {
			'enable': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x0C, 0x01, 0xFE, 0x27],
			'disable': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x0C, 0x00, 0xFE, 0x28],
		}, 

		# 开机提示音
		'setStartupPrompMusic': {
			'enable': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x0D, 0x00, 0xFE, 0x27],
			'disable': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x0D, 0x01, 0xFE, 0x26],
		}, 

		# 设置码参数提示音
		'setEnableConfigCodePrompMusic': {
			'enable': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x0E, 0x00, 0xFE, 0x26],
			'disable': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x0E, 0x01, 0xFE, 0x25],
		}, 

		# 解码成功提示声
		'setEnableScanningSuccessFulPrompMusic': {
			'enable': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x38, 0x01, 0xFE, 0xEE],
			'disable': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x38, 0x00, 0xFE, 0xEF],
		}, 

		# 照明灯控制
		'setFloodLedMode': {
			'parse': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x02, 0x00, 0xFE, 0x32],
			'on': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x02, 0x01, 0xFE, 0x31],
			'off': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x02, 0x02, 0xFE, 0x30],
		}, 

		# 定位灯控制
		'setPositionLedMode': {
			'parse': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x03, 0x00, 0xFE, 0x31],
			'on': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x03, 0x01, 0xFE, 0x30],
			'off': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x03, 0x02, 0xFE, 0x2F],
		}, 

		# 码制字符输出
		'setEnableSendingoutCodeCharacter': {
			'enable': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x2D, 0x02, 0xFE, 0xF9],
			'disable': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x2D, 0x00, 0xFE, 0xFA],
		}, 

		# QRCode
		'setEnableQRCode': {
			'enable': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF0, 0x25, 0x00, 0xFE, 0x11],
			'disable': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF0, 0x25, 0x01, 0xFE, 0x10],
		}, 

		# MicroQRCode
		'setEnableMicroQRCode': {
			'enable': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF1, 0x3D, 0x00, 0xFD, 0xF8],
			'disable': [ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF1, 0x3D, 0x01, 0xFD, 0xF7],
		}, 

		# 串口波特率
		'setSerialComPortBaudrate': {
			'9600': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x9C, 0x06, 0xFE, 0x85],
			'19200': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x9C, 0x07, 0xFE, 0x84],
			'38400': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x9C, 0x08, 0xFE, 0x83],
			'57600': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x9C, 0x09, 0xFE, 0x82],
			'115200': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x9C, 0x0A, 0xFE, 0x81],
		}, 

		# 串口奇偶性
		'setSerialComPortParity': {
			'odd': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x9E, 0x00, 0xFE, 0x89],
			'even': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x9E, 0x01, 0xFE, 0x88],
			'flag': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x9E, 0x02, 0xFE, 0x87],
			'space': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x9E, 0x03, 0xFE, 0x86],
			'none': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x9E, 0x04, 0xFE, 0x85],
		}, 

		# 串口停止位选择
		'setSerialComPortStopBit': {
			'one': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x9D, 0x01, 0xFE, 0x89],
			'two': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x9D, 0x02, 0xFE, 0x88],
		}, 

		# 串口字符间延迟
		'setSerialComPortCharacterDelay': {
			'1ms': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x6E, 0x01, 0xFE, 0xB8],
			'99ms': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0x6E, 0x63, 0xFE, 0xB8],
		}, 

		# 前后缀组合方式
		'setPrefixSuffixMode': {
			'none': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0xEB, 0x00, 0xFE, 0x3C],
			'suffix1': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0xEB, 0x01, 0xFE, 0x3B],
			'suffix2': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0xEB, 0x02, 0xFE, 0x3A],
			'suffix12': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0xEB, 0x03, 0xFE, 0x39],
			'prefix': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0xEB, 0x04, 0xFE, 0x38],
			'prefixSuffix1': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0xEB, 0x05, 0xFE, 0x37],
			'prefixSuffix2': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0xEB, 0x06, 0xFE, 0x36],
			'prefixSuffix12': [ 0x07, 0xC6, 0x04, 0x08, 0x00, 0xEB, 0x07, 0xFE, 0x35],
		}, 

		# 前缀后缀设置
		'setPrefixSuffixCode': {
			'code': [ 0x0B, 0xC6, 0x04, 0x08, 0x00, 0x69, 0x00, 0x68, 0x00, 0x6A, 0x00, 0x00, 0x00],
		}, 

	}

		
	
    def __init__(self):
        # Creat Log
        self.__logger = mlog.MatrixLogger("Codescan")

        # Creat serial port
        self.__serialComPort = serial.Serial('/dev/ttyS1', 9600, timeout=0.5)
        if not self.__serialComPort.isOpen():
            self.__logger.error('self.__serial /dev/ttyS1 could not be opened.')
            return False

    #####################################################
    ##    将命令转换成真正要传输给设备的字节
    ##    接下来会通过串口传输这些字节
    #####################################################
    def sendCommand(self, cmdList):
        # 将命令转换成二进制编码字节
        cmdBytesArray = []
        for item in cmdList:
            cmdBytesArray += chr(item)

		# debug
		print cmdBytesArray
        # 将字节发送到串口
        length = self.__serialComPort.write(cmdBytesArray)
        if length != len(cmdBytesArray):
            self.__logger.error('cmdBytesArray: ', cmdBytesArray)
            self.__logger.error('write %d - %d /dev/ttyS1 failed.', length, len(cmdBytesArray))
            return False
            
        return True      
    
    #####################################################
    ##    根据命令和参数，向设备发送对应的命令
    ##    
    ##    请参考数据结构__funtionParameterCommandBytesDict，里面包含了每一个命令，以及命令支持的参数。
	##	  例如，setFactoryDefault命令，支持restore参数，其命令字节为[ 0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0xFF, 0x02, 0xFD, 0x33 ]
	##    所以调用使用以下代码:
	##    result = setCommand('setFactoryDefault', 'restore')
    #####################################################
    def setCommand(self, function, parameter):
        
		if self.__funtionParameterCommandBytesDict.has_key(function):
			parameterCommandBytesDict = self.__funtionParameterCommandBytesDict[function]
			if parameterCommandBytesDict.has_key(parameter):
				commandBytes = parameterCommandBytesDict[parameter]
				print function
				print parameter
				print commandBytes
				#result = self.sendCommand(commandBytes)
				return result
			else
				return False;
		else
			return False;

				
